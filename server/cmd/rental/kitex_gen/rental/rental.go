// Code generated by thriftgo (0.2.4). DO NOT EDIT.

package rental

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type TripStatus int64

const (
	TripStatus_TS_NOT_SPECIFIED TripStatus = 0
	TripStatus_IN_PROGRESS      TripStatus = 1
	TripStatus_FINISHED         TripStatus = 2
)

func (p TripStatus) String() string {
	switch p {
	case TripStatus_TS_NOT_SPECIFIED:
		return "TS_NOT_SPECIFIED"
	case TripStatus_IN_PROGRESS:
		return "IN_PROGRESS"
	case TripStatus_FINISHED:
		return "FINISHED"
	}
	return "<UNSET>"
}

func TripStatusFromString(s string) (TripStatus, error) {
	switch s {
	case "TS_NOT_SPECIFIED":
		return TripStatus_TS_NOT_SPECIFIED, nil
	case "IN_PROGRESS":
		return TripStatus_IN_PROGRESS, nil
	case "FINISHED":
		return TripStatus_FINISHED, nil
	}
	return TripStatus(0), fmt.Errorf("not a valid TripStatus string")
}

func TripStatusPtr(v TripStatus) *TripStatus { return &v }
func (p *TripStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TripStatus(result.Int64)
	return
}

func (p *TripStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Gender int64

const (
	Gender_G_NOT_SPECIFIED Gender = 0
	Gender_MALE            Gender = 1
	Gender_FEMALE          Gender = 2
)

func (p Gender) String() string {
	switch p {
	case Gender_G_NOT_SPECIFIED:
		return "G_NOT_SPECIFIED"
	case Gender_MALE:
		return "MALE"
	case Gender_FEMALE:
		return "FEMALE"
	}
	return "<UNSET>"
}

func GenderFromString(s string) (Gender, error) {
	switch s {
	case "G_NOT_SPECIFIED":
		return Gender_G_NOT_SPECIFIED, nil
	case "MALE":
		return Gender_MALE, nil
	case "FEMALE":
		return Gender_FEMALE, nil
	}
	return Gender(0), fmt.Errorf("not a valid Gender string")
}

func GenderPtr(v Gender) *Gender { return &v }
func (p *Gender) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Gender(result.Int64)
	return
}

func (p *Gender) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IdentityStatus int64

const (
	IdentityStatus_UNSUBMITTED IdentityStatus = 0
	IdentityStatus_PENDING     IdentityStatus = 1
	IdentityStatus_VERIFIED    IdentityStatus = 2
)

func (p IdentityStatus) String() string {
	switch p {
	case IdentityStatus_UNSUBMITTED:
		return "UNSUBMITTED"
	case IdentityStatus_PENDING:
		return "PENDING"
	case IdentityStatus_VERIFIED:
		return "VERIFIED"
	}
	return "<UNSET>"
}

func IdentityStatusFromString(s string) (IdentityStatus, error) {
	switch s {
	case "UNSUBMITTED":
		return IdentityStatus_UNSUBMITTED, nil
	case "PENDING":
		return IdentityStatus_PENDING, nil
	case "VERIFIED":
		return IdentityStatus_VERIFIED, nil
	}
	return IdentityStatus(0), fmt.Errorf("not a valid IdentityStatus string")
}

func IdentityStatusPtr(v IdentityStatus) *IdentityStatus { return &v }
func (p *IdentityStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = IdentityStatus(result.Int64)
	return
}

func (p *IdentityStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Location struct {
	Latitude  float64 `thrift:"latitude,1" json:"latitude"`
	Longitude float64 `thrift:"longitude,2" json:"longitude"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) GetLatitude() (v float64) {
	return p.Latitude
}

func (p *Location) GetLongitude() (v float64) {
	return p.Longitude
}
func (p *Location) SetLatitude(val float64) {
	p.Latitude = val
}
func (p *Location) SetLongitude(val float64) {
	p.Longitude = val
}

var fieldIDToName_Location = map[int16]string{
	1: "latitude",
	2: "longitude",
}

func (p *Location) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Location[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Location) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Location) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Location"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Latitude); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Longitude); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

func (p *Location) DeepEqual(ano *Location) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Latitude) {
		return false
	}
	if !p.Field2DeepEqual(ano.Longitude) {
		return false
	}
	return true
}

func (p *Location) Field1DeepEqual(src float64) bool {

	if p.Latitude != src {
		return false
	}
	return true
}
func (p *Location) Field2DeepEqual(src float64) bool {

	if p.Longitude != src {
		return false
	}
	return true
}

type LocationStatus struct {
	Location     *Location `thrift:"location,1" json:"location"`
	FeeCent      int32     `thrift:"fee_cent,2" json:"fee_cent"`
	KmDriven     float64   `thrift:"km_driven,3" json:"km_driven"`
	PoiName      string    `thrift:"poi_name,4" json:"poi_name"`
	TimestampSec int64     `thrift:"timestamp_sec,5" json:"timestamp_sec"`
}

func NewLocationStatus() *LocationStatus {
	return &LocationStatus{}
}

var LocationStatus_Location_DEFAULT *Location

func (p *LocationStatus) GetLocation() (v *Location) {
	if !p.IsSetLocation() {
		return LocationStatus_Location_DEFAULT
	}
	return p.Location
}

func (p *LocationStatus) GetFeeCent() (v int32) {
	return p.FeeCent
}

func (p *LocationStatus) GetKmDriven() (v float64) {
	return p.KmDriven
}

func (p *LocationStatus) GetPoiName() (v string) {
	return p.PoiName
}

func (p *LocationStatus) GetTimestampSec() (v int64) {
	return p.TimestampSec
}
func (p *LocationStatus) SetLocation(val *Location) {
	p.Location = val
}
func (p *LocationStatus) SetFeeCent(val int32) {
	p.FeeCent = val
}
func (p *LocationStatus) SetKmDriven(val float64) {
	p.KmDriven = val
}
func (p *LocationStatus) SetPoiName(val string) {
	p.PoiName = val
}
func (p *LocationStatus) SetTimestampSec(val int64) {
	p.TimestampSec = val
}

var fieldIDToName_LocationStatus = map[int16]string{
	1: "location",
	2: "fee_cent",
	3: "km_driven",
	4: "poi_name",
	5: "timestamp_sec",
}

func (p *LocationStatus) IsSetLocation() bool {
	return p.Location != nil
}

func (p *LocationStatus) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LocationStatus[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LocationStatus) ReadField1(iprot thrift.TProtocol) error {
	p.Location = NewLocation()
	if err := p.Location.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LocationStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FeeCent = v
	}
	return nil
}

func (p *LocationStatus) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.KmDriven = v
	}
	return nil
}

func (p *LocationStatus) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PoiName = v
	}
	return nil
}

func (p *LocationStatus) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TimestampSec = v
	}
	return nil
}

func (p *LocationStatus) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LocationStatus"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LocationStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("location", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Location.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LocationStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fee_cent", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.FeeCent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LocationStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("km_driven", thrift.DOUBLE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.KmDriven); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LocationStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("poi_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PoiName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LocationStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timestamp_sec", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TimestampSec); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LocationStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocationStatus(%+v)", *p)
}

func (p *LocationStatus) DeepEqual(ano *LocationStatus) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Location) {
		return false
	}
	if !p.Field2DeepEqual(ano.FeeCent) {
		return false
	}
	if !p.Field3DeepEqual(ano.KmDriven) {
		return false
	}
	if !p.Field4DeepEqual(ano.PoiName) {
		return false
	}
	if !p.Field5DeepEqual(ano.TimestampSec) {
		return false
	}
	return true
}

func (p *LocationStatus) Field1DeepEqual(src *Location) bool {

	if !p.Location.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LocationStatus) Field2DeepEqual(src int32) bool {

	if p.FeeCent != src {
		return false
	}
	return true
}
func (p *LocationStatus) Field3DeepEqual(src float64) bool {

	if p.KmDriven != src {
		return false
	}
	return true
}
func (p *LocationStatus) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PoiName, src) != 0 {
		return false
	}
	return true
}
func (p *LocationStatus) Field5DeepEqual(src int64) bool {

	if p.TimestampSec != src {
		return false
	}
	return true
}

type TripEntity struct {
	Id   string `thrift:"id,1" json:"id"`
	Trip *Trip  `thrift:"trip,2" json:"trip"`
}

func NewTripEntity() *TripEntity {
	return &TripEntity{}
}

func (p *TripEntity) GetId() (v string) {
	return p.Id
}

var TripEntity_Trip_DEFAULT *Trip

func (p *TripEntity) GetTrip() (v *Trip) {
	if !p.IsSetTrip() {
		return TripEntity_Trip_DEFAULT
	}
	return p.Trip
}
func (p *TripEntity) SetId(val string) {
	p.Id = val
}
func (p *TripEntity) SetTrip(val *Trip) {
	p.Trip = val
}

var fieldIDToName_TripEntity = map[int16]string{
	1: "id",
	2: "trip",
}

func (p *TripEntity) IsSetTrip() bool {
	return p.Trip != nil
}

func (p *TripEntity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripEntity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripEntity) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *TripEntity) ReadField2(iprot thrift.TProtocol) error {
	p.Trip = NewTrip()
	if err := p.Trip.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripEntity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TripEntity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripEntity) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TripEntity) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trip", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Trip.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TripEntity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripEntity(%+v)", *p)
}

func (p *TripEntity) DeepEqual(ano *TripEntity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Trip) {
		return false
	}
	return true
}

func (p *TripEntity) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *TripEntity) Field2DeepEqual(src *Trip) bool {

	if !p.Trip.DeepEqual(src) {
		return false
	}
	return true
}

type Trip struct {
	AccountId  string          `thrift:"account_id,1" json:"account_id"`
	CarId      string          `thrift:"car_id,2" json:"car_id"`
	Start      *LocationStatus `thrift:"start,3" json:"start"`
	Current    *LocationStatus `thrift:"current,4" json:"current"`
	End        *LocationStatus `thrift:"end,5" json:"end"`
	Status     TripStatus      `thrift:"status,6" json:"status"`
	IdentityId string          `thrift:"identity_id,7" json:"identity_id"`
}

func NewTrip() *Trip {
	return &Trip{}
}

func (p *Trip) GetAccountId() (v string) {
	return p.AccountId
}

func (p *Trip) GetCarId() (v string) {
	return p.CarId
}

var Trip_Start_DEFAULT *LocationStatus

func (p *Trip) GetStart() (v *LocationStatus) {
	if !p.IsSetStart() {
		return Trip_Start_DEFAULT
	}
	return p.Start
}

var Trip_Current_DEFAULT *LocationStatus

func (p *Trip) GetCurrent() (v *LocationStatus) {
	if !p.IsSetCurrent() {
		return Trip_Current_DEFAULT
	}
	return p.Current
}

var Trip_End_DEFAULT *LocationStatus

func (p *Trip) GetEnd() (v *LocationStatus) {
	if !p.IsSetEnd() {
		return Trip_End_DEFAULT
	}
	return p.End
}

func (p *Trip) GetStatus() (v TripStatus) {
	return p.Status
}

func (p *Trip) GetIdentityId() (v string) {
	return p.IdentityId
}
func (p *Trip) SetAccountId(val string) {
	p.AccountId = val
}
func (p *Trip) SetCarId(val string) {
	p.CarId = val
}
func (p *Trip) SetStart(val *LocationStatus) {
	p.Start = val
}
func (p *Trip) SetCurrent(val *LocationStatus) {
	p.Current = val
}
func (p *Trip) SetEnd(val *LocationStatus) {
	p.End = val
}
func (p *Trip) SetStatus(val TripStatus) {
	p.Status = val
}
func (p *Trip) SetIdentityId(val string) {
	p.IdentityId = val
}

var fieldIDToName_Trip = map[int16]string{
	1: "account_id",
	2: "car_id",
	3: "start",
	4: "current",
	5: "end",
	6: "status",
	7: "identity_id",
}

func (p *Trip) IsSetStart() bool {
	return p.Start != nil
}

func (p *Trip) IsSetCurrent() bool {
	return p.Current != nil
}

func (p *Trip) IsSetEnd() bool {
	return p.End != nil
}

func (p *Trip) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Trip[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Trip) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountId = v
	}
	return nil
}

func (p *Trip) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CarId = v
	}
	return nil
}

func (p *Trip) ReadField3(iprot thrift.TProtocol) error {
	p.Start = NewLocationStatus()
	if err := p.Start.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Trip) ReadField4(iprot thrift.TProtocol) error {
	p.Current = NewLocationStatus()
	if err := p.Current.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Trip) ReadField5(iprot thrift.TProtocol) error {
	p.End = NewLocationStatus()
	if err := p.End.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Trip) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = TripStatus(v)
	}
	return nil
}

func (p *Trip) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdentityId = v
	}
	return nil
}

func (p *Trip) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Trip"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Trip) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("account_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Trip) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("car_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CarId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Trip) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Start.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Trip) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("current", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Current.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Trip) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.End.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Trip) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Trip) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("identity_id", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdentityId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Trip) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Trip(%+v)", *p)
}

func (p *Trip) DeepEqual(ano *Trip) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CarId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Start) {
		return false
	}
	if !p.Field4DeepEqual(ano.Current) {
		return false
	}
	if !p.Field5DeepEqual(ano.End) {
		return false
	}
	if !p.Field6DeepEqual(ano.Status) {
		return false
	}
	if !p.Field7DeepEqual(ano.IdentityId) {
		return false
	}
	return true
}

func (p *Trip) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountId, src) != 0 {
		return false
	}
	return true
}
func (p *Trip) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CarId, src) != 0 {
		return false
	}
	return true
}
func (p *Trip) Field3DeepEqual(src *LocationStatus) bool {

	if !p.Start.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Trip) Field4DeepEqual(src *LocationStatus) bool {

	if !p.Current.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Trip) Field5DeepEqual(src *LocationStatus) bool {

	if !p.End.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Trip) Field6DeepEqual(src TripStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *Trip) Field7DeepEqual(src string) bool {

	if strings.Compare(p.IdentityId, src) != 0 {
		return false
	}
	return true
}

type CreateTripRequest struct {
	Start     *Location `thrift:"start,1" json:"start"`
	CarId     string    `thrift:"car_id,2" json:"car_id"`
	AvatarUrl string    `thrift:"avatar_url,3" json:"avatar_url"`
}

func NewCreateTripRequest() *CreateTripRequest {
	return &CreateTripRequest{}
}

var CreateTripRequest_Start_DEFAULT *Location

func (p *CreateTripRequest) GetStart() (v *Location) {
	if !p.IsSetStart() {
		return CreateTripRequest_Start_DEFAULT
	}
	return p.Start
}

func (p *CreateTripRequest) GetCarId() (v string) {
	return p.CarId
}

func (p *CreateTripRequest) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}
func (p *CreateTripRequest) SetStart(val *Location) {
	p.Start = val
}
func (p *CreateTripRequest) SetCarId(val string) {
	p.CarId = val
}
func (p *CreateTripRequest) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}

var fieldIDToName_CreateTripRequest = map[int16]string{
	1: "start",
	2: "car_id",
	3: "avatar_url",
}

func (p *CreateTripRequest) IsSetStart() bool {
	return p.Start != nil
}

func (p *CreateTripRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateTripRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateTripRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Start = NewLocation()
	if err := p.Start.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateTripRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CarId = v
	}
	return nil
}

func (p *CreateTripRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AvatarUrl = v
	}
	return nil
}

func (p *CreateTripRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTripRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateTripRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Start.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateTripRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("car_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CarId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateTripRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar_url", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AvatarUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateTripRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTripRequest(%+v)", *p)
}

func (p *CreateTripRequest) DeepEqual(ano *CreateTripRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Start) {
		return false
	}
	if !p.Field2DeepEqual(ano.CarId) {
		return false
	}
	if !p.Field3DeepEqual(ano.AvatarUrl) {
		return false
	}
	return true
}

func (p *CreateTripRequest) Field1DeepEqual(src *Location) bool {

	if !p.Start.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateTripRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CarId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTripRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.AvatarUrl, src) != 0 {
		return false
	}
	return true
}

type GetTripRequest struct {
	Id string `thrift:"id,1" json:"id"`
}

func NewGetTripRequest() *GetTripRequest {
	return &GetTripRequest{}
}

func (p *GetTripRequest) GetId() (v string) {
	return p.Id
}
func (p *GetTripRequest) SetId(val string) {
	p.Id = val
}

var fieldIDToName_GetTripRequest = map[int16]string{
	1: "id",
}

func (p *GetTripRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTripRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTripRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetTripRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTripRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTripRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTripRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTripRequest(%+v)", *p)
}

func (p *GetTripRequest) DeepEqual(ano *GetTripRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetTripRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}

type GetTripsRequest struct {
	Status TripStatus `thrift:"status,1" json:"status"`
}

func NewGetTripsRequest() *GetTripsRequest {
	return &GetTripsRequest{}
}

func (p *GetTripsRequest) GetStatus() (v TripStatus) {
	return p.Status
}
func (p *GetTripsRequest) SetStatus(val TripStatus) {
	p.Status = val
}

var fieldIDToName_GetTripsRequest = map[int16]string{
	1: "status",
}

func (p *GetTripsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTripsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTripsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = TripStatus(v)
	}
	return nil
}

func (p *GetTripsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTripsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTripsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTripsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTripsRequest(%+v)", *p)
}

func (p *GetTripsRequest) DeepEqual(ano *GetTripsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *GetTripsRequest) Field1DeepEqual(src TripStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}

type GetTripsResponse struct {
	Trips []*TripEntity `thrift:"trips,1" json:"trips"`
}

func NewGetTripsResponse() *GetTripsResponse {
	return &GetTripsResponse{}
}

func (p *GetTripsResponse) GetTrips() (v []*TripEntity) {
	return p.Trips
}
func (p *GetTripsResponse) SetTrips(val []*TripEntity) {
	p.Trips = val
}

var fieldIDToName_GetTripsResponse = map[int16]string{
	1: "trips",
}

func (p *GetTripsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTripsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTripsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Trips = make([]*TripEntity, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTripEntity()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Trips = append(p.Trips, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetTripsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTripsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTripsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trips", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Trips)); err != nil {
		return err
	}
	for _, v := range p.Trips {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTripsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTripsResponse(%+v)", *p)
}

func (p *GetTripsResponse) DeepEqual(ano *GetTripsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Trips) {
		return false
	}
	return true
}

func (p *GetTripsResponse) Field1DeepEqual(src []*TripEntity) bool {

	if len(p.Trips) != len(src) {
		return false
	}
	for i, v := range p.Trips {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type UpdateTripRequest struct {
	Id      string    `thrift:"id,1" json:"id"`
	Current *Location `thrift:"current,2" json:"current"`
	EndTrip bool      `thrift:"end_trip,3" json:"end_trip"`
}

func NewUpdateTripRequest() *UpdateTripRequest {
	return &UpdateTripRequest{}
}

func (p *UpdateTripRequest) GetId() (v string) {
	return p.Id
}

var UpdateTripRequest_Current_DEFAULT *Location

func (p *UpdateTripRequest) GetCurrent() (v *Location) {
	if !p.IsSetCurrent() {
		return UpdateTripRequest_Current_DEFAULT
	}
	return p.Current
}

func (p *UpdateTripRequest) GetEndTrip() (v bool) {
	return p.EndTrip
}
func (p *UpdateTripRequest) SetId(val string) {
	p.Id = val
}
func (p *UpdateTripRequest) SetCurrent(val *Location) {
	p.Current = val
}
func (p *UpdateTripRequest) SetEndTrip(val bool) {
	p.EndTrip = val
}

var fieldIDToName_UpdateTripRequest = map[int16]string{
	1: "id",
	2: "current",
	3: "end_trip",
}

func (p *UpdateTripRequest) IsSetCurrent() bool {
	return p.Current != nil
}

func (p *UpdateTripRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateTripRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTripRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpdateTripRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Current = NewLocation()
	if err := p.Current.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateTripRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EndTrip = v
	}
	return nil
}

func (p *UpdateTripRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTripRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTripRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateTripRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("current", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Current.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateTripRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_trip", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EndTrip); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateTripRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTripRequest(%+v)", *p)
}

func (p *UpdateTripRequest) DeepEqual(ano *UpdateTripRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Current) {
		return false
	}
	if !p.Field3DeepEqual(ano.EndTrip) {
		return false
	}
	return true
}

func (p *UpdateTripRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTripRequest) Field2DeepEqual(src *Location) bool {

	if !p.Current.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateTripRequest) Field3DeepEqual(src bool) bool {

	if p.EndTrip != src {
		return false
	}
	return true
}

type Profile struct {
	Identity       *Identity      `thrift:"identity,1" json:"identity"`
	IdentityStatus IdentityStatus `thrift:"identity_status,2" json:"identity_status"`
}

func NewProfile() *Profile {
	return &Profile{}
}

var Profile_Identity_DEFAULT *Identity

func (p *Profile) GetIdentity() (v *Identity) {
	if !p.IsSetIdentity() {
		return Profile_Identity_DEFAULT
	}
	return p.Identity
}

func (p *Profile) GetIdentityStatus() (v IdentityStatus) {
	return p.IdentityStatus
}
func (p *Profile) SetIdentity(val *Identity) {
	p.Identity = val
}
func (p *Profile) SetIdentityStatus(val IdentityStatus) {
	p.IdentityStatus = val
}

var fieldIDToName_Profile = map[int16]string{
	1: "identity",
	2: "identity_status",
}

func (p *Profile) IsSetIdentity() bool {
	return p.Identity != nil
}

func (p *Profile) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Profile[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Profile) ReadField1(iprot thrift.TProtocol) error {
	p.Identity = NewIdentity()
	if err := p.Identity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Profile) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.IdentityStatus = IdentityStatus(v)
	}
	return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Profile"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("identity", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Identity.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Profile) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("identity_status", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.IdentityStatus)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Profile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Profile(%+v)", *p)
}

func (p *Profile) DeepEqual(ano *Profile) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Identity) {
		return false
	}
	if !p.Field2DeepEqual(ano.IdentityStatus) {
		return false
	}
	return true
}

func (p *Profile) Field1DeepEqual(src *Identity) bool {

	if !p.Identity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Profile) Field2DeepEqual(src IdentityStatus) bool {

	if p.IdentityStatus != src {
		return false
	}
	return true
}

type Identity struct {
	LicNumber       string `thrift:"lic_number,1" json:"lic_number"`
	Name            string `thrift:"name,2" json:"name"`
	Gender          Gender `thrift:"gender,3" json:"gender"`
	BirthDateMillis int64  `thrift:"birth_date_millis,4" json:"birth_date_millis"`
}

func NewIdentity() *Identity {
	return &Identity{}
}

func (p *Identity) GetLicNumber() (v string) {
	return p.LicNumber
}

func (p *Identity) GetName() (v string) {
	return p.Name
}

func (p *Identity) GetGender() (v Gender) {
	return p.Gender
}

func (p *Identity) GetBirthDateMillis() (v int64) {
	return p.BirthDateMillis
}
func (p *Identity) SetLicNumber(val string) {
	p.LicNumber = val
}
func (p *Identity) SetName(val string) {
	p.Name = val
}
func (p *Identity) SetGender(val Gender) {
	p.Gender = val
}
func (p *Identity) SetBirthDateMillis(val int64) {
	p.BirthDateMillis = val
}

var fieldIDToName_Identity = map[int16]string{
	1: "lic_number",
	2: "name",
	3: "gender",
	4: "birth_date_millis",
}

func (p *Identity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Identity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Identity) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LicNumber = v
	}
	return nil
}

func (p *Identity) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Identity) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gender = Gender(v)
	}
	return nil
}

func (p *Identity) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BirthDateMillis = v
	}
	return nil
}

func (p *Identity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Identity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Identity) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lic_number", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LicNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Identity) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Identity) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gender", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Identity) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("birth_date_millis", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BirthDateMillis); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Identity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Identity(%+v)", *p)
}

func (p *Identity) DeepEqual(ano *Identity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LicNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field4DeepEqual(ano.BirthDateMillis) {
		return false
	}
	return true
}

func (p *Identity) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LicNumber, src) != 0 {
		return false
	}
	return true
}
func (p *Identity) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Identity) Field3DeepEqual(src Gender) bool {

	if p.Gender != src {
		return false
	}
	return true
}
func (p *Identity) Field4DeepEqual(src int64) bool {

	if p.BirthDateMillis != src {
		return false
	}
	return true
}

type GetProfileRequest struct {
}

func NewGetProfileRequest() *GetProfileRequest {
	return &GetProfileRequest{}
}

var fieldIDToName_GetProfileRequest = map[int16]string{}

func (p *GetProfileRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetProfileRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetProfileRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetProfileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProfileRequest(%+v)", *p)
}

func (p *GetProfileRequest) DeepEqual(ano *GetProfileRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ClearProfileRequest struct {
}

func NewClearProfileRequest() *ClearProfileRequest {
	return &ClearProfileRequest{}
}

var fieldIDToName_ClearProfileRequest = map[int16]string{}

func (p *ClearProfileRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClearProfileRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ClearProfileRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearProfileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearProfileRequest(%+v)", *p)
}

func (p *ClearProfileRequest) DeepEqual(ano *ClearProfileRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetProfilePhotoRequest struct {
}

func NewGetProfilePhotoRequest() *GetProfilePhotoRequest {
	return &GetProfilePhotoRequest{}
}

var fieldIDToName_GetProfilePhotoRequest = map[int16]string{}

func (p *GetProfilePhotoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetProfilePhotoRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetProfilePhotoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetProfilePhotoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProfilePhotoRequest(%+v)", *p)
}

func (p *GetProfilePhotoRequest) DeepEqual(ano *GetProfilePhotoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetProfilePhotoResponse struct {
	Url string `thrift:"url,1" json:"url"`
}

func NewGetProfilePhotoResponse() *GetProfilePhotoResponse {
	return &GetProfilePhotoResponse{}
}

func (p *GetProfilePhotoResponse) GetUrl() (v string) {
	return p.Url
}
func (p *GetProfilePhotoResponse) SetUrl(val string) {
	p.Url = val
}

var fieldIDToName_GetProfilePhotoResponse = map[int16]string{
	1: "url",
}

func (p *GetProfilePhotoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetProfilePhotoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetProfilePhotoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = v
	}
	return nil
}

func (p *GetProfilePhotoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProfilePhotoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetProfilePhotoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetProfilePhotoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProfilePhotoResponse(%+v)", *p)
}

func (p *GetProfilePhotoResponse) DeepEqual(ano *GetProfilePhotoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Url) {
		return false
	}
	return true
}

func (p *GetProfilePhotoResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}

type CreateProfilePhotoRequest struct {
}

func NewCreateProfilePhotoRequest() *CreateProfilePhotoRequest {
	return &CreateProfilePhotoRequest{}
}

var fieldIDToName_CreateProfilePhotoRequest = map[int16]string{}

func (p *CreateProfilePhotoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateProfilePhotoRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateProfilePhotoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateProfilePhotoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateProfilePhotoRequest(%+v)", *p)
}

func (p *CreateProfilePhotoRequest) DeepEqual(ano *CreateProfilePhotoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CreateProfilePhotoResponse struct {
	UploadUrl string `thrift:"upload_url,1" json:"upload_url"`
}

func NewCreateProfilePhotoResponse() *CreateProfilePhotoResponse {
	return &CreateProfilePhotoResponse{}
}

func (p *CreateProfilePhotoResponse) GetUploadUrl() (v string) {
	return p.UploadUrl
}
func (p *CreateProfilePhotoResponse) SetUploadUrl(val string) {
	p.UploadUrl = val
}

var fieldIDToName_CreateProfilePhotoResponse = map[int16]string{
	1: "upload_url",
}

func (p *CreateProfilePhotoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateProfilePhotoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateProfilePhotoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UploadUrl = v
	}
	return nil
}

func (p *CreateProfilePhotoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateProfilePhotoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateProfilePhotoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("upload_url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UploadUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateProfilePhotoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateProfilePhotoResponse(%+v)", *p)
}

func (p *CreateProfilePhotoResponse) DeepEqual(ano *CreateProfilePhotoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UploadUrl) {
		return false
	}
	return true
}

func (p *CreateProfilePhotoResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UploadUrl, src) != 0 {
		return false
	}
	return true
}

type CompleteProfilePhotoRequest struct {
}

func NewCompleteProfilePhotoRequest() *CompleteProfilePhotoRequest {
	return &CompleteProfilePhotoRequest{}
}

var fieldIDToName_CompleteProfilePhotoRequest = map[int16]string{}

func (p *CompleteProfilePhotoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompleteProfilePhotoRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CompleteProfilePhotoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompleteProfilePhotoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompleteProfilePhotoRequest(%+v)", *p)
}

func (p *CompleteProfilePhotoRequest) DeepEqual(ano *CompleteProfilePhotoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ClearProfilePhotoRequest struct {
}

func NewClearProfilePhotoRequest() *ClearProfilePhotoRequest {
	return &ClearProfilePhotoRequest{}
}

var fieldIDToName_ClearProfilePhotoRequest = map[int16]string{}

func (p *ClearProfilePhotoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClearProfilePhotoRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ClearProfilePhotoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearProfilePhotoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearProfilePhotoRequest(%+v)", *p)
}

func (p *ClearProfilePhotoRequest) DeepEqual(ano *ClearProfilePhotoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ClearProfilePhotoResponse struct {
}

func NewClearProfilePhotoResponse() *ClearProfilePhotoResponse {
	return &ClearProfilePhotoResponse{}
}

var fieldIDToName_ClearProfilePhotoResponse = map[int16]string{}

func (p *ClearProfilePhotoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClearProfilePhotoResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ClearProfilePhotoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearProfilePhotoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearProfilePhotoResponse(%+v)", *p)
}

func (p *ClearProfilePhotoResponse) DeepEqual(ano *ClearProfilePhotoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type TripService interface {
	CreateTrip(ctx context.Context, req *CreateTripRequest) (r *TripEntity, err error)

	GetTrip(ctx context.Context, req *GetTripRequest) (r *Trip, err error)

	GetTrips(ctx context.Context, req *GetTripsRequest) (r *GetTripsResponse, err error)

	UpdateTrip(ctx context.Context, req *UpdateTripRequest) (r *Trip, err error)
}

type TripServiceClient struct {
	c thrift.TClient
}

func NewTripServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TripServiceClient {
	return &TripServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTripServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TripServiceClient {
	return &TripServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTripServiceClient(c thrift.TClient) *TripServiceClient {
	return &TripServiceClient{
		c: c,
	}
}

func (p *TripServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *TripServiceClient) CreateTrip(ctx context.Context, req *CreateTripRequest) (r *TripEntity, err error) {
	var _args TripServiceCreateTripArgs
	_args.Req = req
	var _result TripServiceCreateTripResult
	if err = p.Client_().Call(ctx, "CreateTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TripServiceClient) GetTrip(ctx context.Context, req *GetTripRequest) (r *Trip, err error) {
	var _args TripServiceGetTripArgs
	_args.Req = req
	var _result TripServiceGetTripResult
	if err = p.Client_().Call(ctx, "GetTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TripServiceClient) GetTrips(ctx context.Context, req *GetTripsRequest) (r *GetTripsResponse, err error) {
	var _args TripServiceGetTripsArgs
	_args.Req = req
	var _result TripServiceGetTripsResult
	if err = p.Client_().Call(ctx, "GetTrips", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TripServiceClient) UpdateTrip(ctx context.Context, req *UpdateTripRequest) (r *Trip, err error) {
	var _args TripServiceUpdateTripArgs
	_args.Req = req
	var _result TripServiceUpdateTripResult
	if err = p.Client_().Call(ctx, "UpdateTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ProfileService interface {
	GetProfile(ctx context.Context, req *GetProfileRequest) (r *Profile, err error)

	SubmitProfile(ctx context.Context, req *Identity) (r *Profile, err error)

	ClearProfile(ctx context.Context, req *ClearProfileRequest) (r *Profile, err error)

	GetProfilePhoto(ctx context.Context, req *GetProfilePhotoRequest) (r *GetProfilePhotoResponse, err error)

	CreateProfilePhoto(ctx context.Context, req *CreateProfilePhotoRequest) (r *CreateProfilePhotoResponse, err error)

	CompleteProfilePhoto(ctx context.Context, req *CompleteProfilePhotoRequest) (r *Identity, err error)

	ClearProfilePhoto(ctx context.Context, req *ClearProfilePhotoRequest) (r *ClearProfilePhotoResponse, err error)
}

type ProfileServiceClient struct {
	c thrift.TClient
}

func NewProfileServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ProfileServiceClient {
	return &ProfileServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewProfileServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ProfileServiceClient {
	return &ProfileServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewProfileServiceClient(c thrift.TClient) *ProfileServiceClient {
	return &ProfileServiceClient{
		c: c,
	}
}

func (p *ProfileServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ProfileServiceClient) GetProfile(ctx context.Context, req *GetProfileRequest) (r *Profile, err error) {
	var _args ProfileServiceGetProfileArgs
	_args.Req = req
	var _result ProfileServiceGetProfileResult
	if err = p.Client_().Call(ctx, "GetProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProfileServiceClient) SubmitProfile(ctx context.Context, req *Identity) (r *Profile, err error) {
	var _args ProfileServiceSubmitProfileArgs
	_args.Req = req
	var _result ProfileServiceSubmitProfileResult
	if err = p.Client_().Call(ctx, "SubmitProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProfileServiceClient) ClearProfile(ctx context.Context, req *ClearProfileRequest) (r *Profile, err error) {
	var _args ProfileServiceClearProfileArgs
	_args.Req = req
	var _result ProfileServiceClearProfileResult
	if err = p.Client_().Call(ctx, "ClearProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProfileServiceClient) GetProfilePhoto(ctx context.Context, req *GetProfilePhotoRequest) (r *GetProfilePhotoResponse, err error) {
	var _args ProfileServiceGetProfilePhotoArgs
	_args.Req = req
	var _result ProfileServiceGetProfilePhotoResult
	if err = p.Client_().Call(ctx, "GetProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProfileServiceClient) CreateProfilePhoto(ctx context.Context, req *CreateProfilePhotoRequest) (r *CreateProfilePhotoResponse, err error) {
	var _args ProfileServiceCreateProfilePhotoArgs
	_args.Req = req
	var _result ProfileServiceCreateProfilePhotoResult
	if err = p.Client_().Call(ctx, "CreateProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProfileServiceClient) CompleteProfilePhoto(ctx context.Context, req *CompleteProfilePhotoRequest) (r *Identity, err error) {
	var _args ProfileServiceCompleteProfilePhotoArgs
	_args.Req = req
	var _result ProfileServiceCompleteProfilePhotoResult
	if err = p.Client_().Call(ctx, "CompleteProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProfileServiceClient) ClearProfilePhoto(ctx context.Context, req *ClearProfilePhotoRequest) (r *ClearProfilePhotoResponse, err error) {
	var _args ProfileServiceClearProfilePhotoArgs
	_args.Req = req
	var _result ProfileServiceClearProfilePhotoResult
	if err = p.Client_().Call(ctx, "ClearProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type TripServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TripService
}

func (p *TripServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TripServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TripServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTripServiceProcessor(handler TripService) *TripServiceProcessor {
	self := &TripServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateTrip", &tripServiceProcessorCreateTrip{handler: handler})
	self.AddToProcessorMap("GetTrip", &tripServiceProcessorGetTrip{handler: handler})
	self.AddToProcessorMap("GetTrips", &tripServiceProcessorGetTrips{handler: handler})
	self.AddToProcessorMap("UpdateTrip", &tripServiceProcessorUpdateTrip{handler: handler})
	return self
}
func (p *TripServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type tripServiceProcessorCreateTrip struct {
	handler TripService
}

func (p *tripServiceProcessorCreateTrip) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TripServiceCreateTripArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateTrip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TripServiceCreateTripResult{}
	var retval *TripEntity
	if retval, err2 = p.handler.CreateTrip(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateTrip: "+err2.Error())
		oprot.WriteMessageBegin("CreateTrip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateTrip", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tripServiceProcessorGetTrip struct {
	handler TripService
}

func (p *tripServiceProcessorGetTrip) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TripServiceGetTripArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTrip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TripServiceGetTripResult{}
	var retval *Trip
	if retval, err2 = p.handler.GetTrip(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTrip: "+err2.Error())
		oprot.WriteMessageBegin("GetTrip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTrip", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tripServiceProcessorGetTrips struct {
	handler TripService
}

func (p *tripServiceProcessorGetTrips) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TripServiceGetTripsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTrips", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TripServiceGetTripsResult{}
	var retval *GetTripsResponse
	if retval, err2 = p.handler.GetTrips(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTrips: "+err2.Error())
		oprot.WriteMessageBegin("GetTrips", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTrips", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tripServiceProcessorUpdateTrip struct {
	handler TripService
}

func (p *tripServiceProcessorUpdateTrip) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TripServiceUpdateTripArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateTrip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TripServiceUpdateTripResult{}
	var retval *Trip
	if retval, err2 = p.handler.UpdateTrip(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateTrip: "+err2.Error())
		oprot.WriteMessageBegin("UpdateTrip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateTrip", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type TripServiceCreateTripArgs struct {
	Req *CreateTripRequest `thrift:"req,1" json:"req"`
}

func NewTripServiceCreateTripArgs() *TripServiceCreateTripArgs {
	return &TripServiceCreateTripArgs{}
}

var TripServiceCreateTripArgs_Req_DEFAULT *CreateTripRequest

func (p *TripServiceCreateTripArgs) GetReq() (v *CreateTripRequest) {
	if !p.IsSetReq() {
		return TripServiceCreateTripArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TripServiceCreateTripArgs) SetReq(val *CreateTripRequest) {
	p.Req = val
}

var fieldIDToName_TripServiceCreateTripArgs = map[int16]string{
	1: "req",
}

func (p *TripServiceCreateTripArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TripServiceCreateTripArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceCreateTripArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceCreateTripArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateTripRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceCreateTripArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTrip_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceCreateTripArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TripServiceCreateTripArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceCreateTripArgs(%+v)", *p)
}

func (p *TripServiceCreateTripArgs) DeepEqual(ano *TripServiceCreateTripArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TripServiceCreateTripArgs) Field1DeepEqual(src *CreateTripRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TripServiceCreateTripResult struct {
	Success *TripEntity `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewTripServiceCreateTripResult() *TripServiceCreateTripResult {
	return &TripServiceCreateTripResult{}
}

var TripServiceCreateTripResult_Success_DEFAULT *TripEntity

func (p *TripServiceCreateTripResult) GetSuccess() (v *TripEntity) {
	if !p.IsSetSuccess() {
		return TripServiceCreateTripResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TripServiceCreateTripResult) SetSuccess(x interface{}) {
	p.Success = x.(*TripEntity)
}

var fieldIDToName_TripServiceCreateTripResult = map[int16]string{
	0: "success",
}

func (p *TripServiceCreateTripResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TripServiceCreateTripResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceCreateTripResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceCreateTripResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTripEntity()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceCreateTripResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTrip_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceCreateTripResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TripServiceCreateTripResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceCreateTripResult(%+v)", *p)
}

func (p *TripServiceCreateTripResult) DeepEqual(ano *TripServiceCreateTripResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TripServiceCreateTripResult) Field0DeepEqual(src *TripEntity) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TripServiceGetTripArgs struct {
	Req *GetTripRequest `thrift:"req,1" json:"req"`
}

func NewTripServiceGetTripArgs() *TripServiceGetTripArgs {
	return &TripServiceGetTripArgs{}
}

var TripServiceGetTripArgs_Req_DEFAULT *GetTripRequest

func (p *TripServiceGetTripArgs) GetReq() (v *GetTripRequest) {
	if !p.IsSetReq() {
		return TripServiceGetTripArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TripServiceGetTripArgs) SetReq(val *GetTripRequest) {
	p.Req = val
}

var fieldIDToName_TripServiceGetTripArgs = map[int16]string{
	1: "req",
}

func (p *TripServiceGetTripArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TripServiceGetTripArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceGetTripArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceGetTripArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetTripRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceGetTripArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrip_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceGetTripArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TripServiceGetTripArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceGetTripArgs(%+v)", *p)
}

func (p *TripServiceGetTripArgs) DeepEqual(ano *TripServiceGetTripArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TripServiceGetTripArgs) Field1DeepEqual(src *GetTripRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TripServiceGetTripResult struct {
	Success *Trip `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewTripServiceGetTripResult() *TripServiceGetTripResult {
	return &TripServiceGetTripResult{}
}

var TripServiceGetTripResult_Success_DEFAULT *Trip

func (p *TripServiceGetTripResult) GetSuccess() (v *Trip) {
	if !p.IsSetSuccess() {
		return TripServiceGetTripResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TripServiceGetTripResult) SetSuccess(x interface{}) {
	p.Success = x.(*Trip)
}

var fieldIDToName_TripServiceGetTripResult = map[int16]string{
	0: "success",
}

func (p *TripServiceGetTripResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TripServiceGetTripResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceGetTripResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceGetTripResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTrip()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceGetTripResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrip_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceGetTripResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TripServiceGetTripResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceGetTripResult(%+v)", *p)
}

func (p *TripServiceGetTripResult) DeepEqual(ano *TripServiceGetTripResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TripServiceGetTripResult) Field0DeepEqual(src *Trip) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TripServiceGetTripsArgs struct {
	Req *GetTripsRequest `thrift:"req,1" json:"req"`
}

func NewTripServiceGetTripsArgs() *TripServiceGetTripsArgs {
	return &TripServiceGetTripsArgs{}
}

var TripServiceGetTripsArgs_Req_DEFAULT *GetTripsRequest

func (p *TripServiceGetTripsArgs) GetReq() (v *GetTripsRequest) {
	if !p.IsSetReq() {
		return TripServiceGetTripsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TripServiceGetTripsArgs) SetReq(val *GetTripsRequest) {
	p.Req = val
}

var fieldIDToName_TripServiceGetTripsArgs = map[int16]string{
	1: "req",
}

func (p *TripServiceGetTripsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TripServiceGetTripsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceGetTripsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceGetTripsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetTripsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceGetTripsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrips_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceGetTripsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TripServiceGetTripsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceGetTripsArgs(%+v)", *p)
}

func (p *TripServiceGetTripsArgs) DeepEqual(ano *TripServiceGetTripsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TripServiceGetTripsArgs) Field1DeepEqual(src *GetTripsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TripServiceGetTripsResult struct {
	Success *GetTripsResponse `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewTripServiceGetTripsResult() *TripServiceGetTripsResult {
	return &TripServiceGetTripsResult{}
}

var TripServiceGetTripsResult_Success_DEFAULT *GetTripsResponse

func (p *TripServiceGetTripsResult) GetSuccess() (v *GetTripsResponse) {
	if !p.IsSetSuccess() {
		return TripServiceGetTripsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TripServiceGetTripsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTripsResponse)
}

var fieldIDToName_TripServiceGetTripsResult = map[int16]string{
	0: "success",
}

func (p *TripServiceGetTripsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TripServiceGetTripsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceGetTripsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceGetTripsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetTripsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceGetTripsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrips_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceGetTripsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TripServiceGetTripsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceGetTripsResult(%+v)", *p)
}

func (p *TripServiceGetTripsResult) DeepEqual(ano *TripServiceGetTripsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TripServiceGetTripsResult) Field0DeepEqual(src *GetTripsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TripServiceUpdateTripArgs struct {
	Req *UpdateTripRequest `thrift:"req,1" json:"req"`
}

func NewTripServiceUpdateTripArgs() *TripServiceUpdateTripArgs {
	return &TripServiceUpdateTripArgs{}
}

var TripServiceUpdateTripArgs_Req_DEFAULT *UpdateTripRequest

func (p *TripServiceUpdateTripArgs) GetReq() (v *UpdateTripRequest) {
	if !p.IsSetReq() {
		return TripServiceUpdateTripArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TripServiceUpdateTripArgs) SetReq(val *UpdateTripRequest) {
	p.Req = val
}

var fieldIDToName_TripServiceUpdateTripArgs = map[int16]string{
	1: "req",
}

func (p *TripServiceUpdateTripArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TripServiceUpdateTripArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceUpdateTripArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceUpdateTripArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateTripRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceUpdateTripArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrip_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceUpdateTripArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TripServiceUpdateTripArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceUpdateTripArgs(%+v)", *p)
}

func (p *TripServiceUpdateTripArgs) DeepEqual(ano *TripServiceUpdateTripArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TripServiceUpdateTripArgs) Field1DeepEqual(src *UpdateTripRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TripServiceUpdateTripResult struct {
	Success *Trip `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewTripServiceUpdateTripResult() *TripServiceUpdateTripResult {
	return &TripServiceUpdateTripResult{}
}

var TripServiceUpdateTripResult_Success_DEFAULT *Trip

func (p *TripServiceUpdateTripResult) GetSuccess() (v *Trip) {
	if !p.IsSetSuccess() {
		return TripServiceUpdateTripResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TripServiceUpdateTripResult) SetSuccess(x interface{}) {
	p.Success = x.(*Trip)
}

var fieldIDToName_TripServiceUpdateTripResult = map[int16]string{
	0: "success",
}

func (p *TripServiceUpdateTripResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TripServiceUpdateTripResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripServiceUpdateTripResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripServiceUpdateTripResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTrip()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripServiceUpdateTripResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrip_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripServiceUpdateTripResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TripServiceUpdateTripResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripServiceUpdateTripResult(%+v)", *p)
}

func (p *TripServiceUpdateTripResult) DeepEqual(ano *TripServiceUpdateTripResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TripServiceUpdateTripResult) Field0DeepEqual(src *Trip) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ProfileService
}

func (p *ProfileServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ProfileServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ProfileServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewProfileServiceProcessor(handler ProfileService) *ProfileServiceProcessor {
	self := &ProfileServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetProfile", &profileServiceProcessorGetProfile{handler: handler})
	self.AddToProcessorMap("SubmitProfile", &profileServiceProcessorSubmitProfile{handler: handler})
	self.AddToProcessorMap("ClearProfile", &profileServiceProcessorClearProfile{handler: handler})
	self.AddToProcessorMap("GetProfilePhoto", &profileServiceProcessorGetProfilePhoto{handler: handler})
	self.AddToProcessorMap("CreateProfilePhoto", &profileServiceProcessorCreateProfilePhoto{handler: handler})
	self.AddToProcessorMap("CompleteProfilePhoto", &profileServiceProcessorCompleteProfilePhoto{handler: handler})
	self.AddToProcessorMap("ClearProfilePhoto", &profileServiceProcessorClearProfilePhoto{handler: handler})
	return self
}
func (p *ProfileServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type profileServiceProcessorGetProfile struct {
	handler ProfileService
}

func (p *profileServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceGetProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProfileServiceGetProfileResult{}
	var retval *Profile
	if retval, err2 = p.handler.GetProfile(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfile: "+err2.Error())
		oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorSubmitProfile struct {
	handler ProfileService
}

func (p *profileServiceProcessorSubmitProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceSubmitProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProfileServiceSubmitProfileResult{}
	var retval *Profile
	if retval, err2 = p.handler.SubmitProfile(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitProfile: "+err2.Error())
		oprot.WriteMessageBegin("SubmitProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorClearProfile struct {
	handler ProfileService
}

func (p *profileServiceProcessorClearProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceClearProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClearProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProfileServiceClearProfileResult{}
	var retval *Profile
	if retval, err2 = p.handler.ClearProfile(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearProfile: "+err2.Error())
		oprot.WriteMessageBegin("ClearProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClearProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorGetProfilePhoto struct {
	handler ProfileService
}

func (p *profileServiceProcessorGetProfilePhoto) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceGetProfilePhotoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProfileServiceGetProfilePhotoResult{}
	var retval *GetProfilePhotoResponse
	if retval, err2 = p.handler.GetProfilePhoto(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfilePhoto: "+err2.Error())
		oprot.WriteMessageBegin("GetProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProfilePhoto", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorCreateProfilePhoto struct {
	handler ProfileService
}

func (p *profileServiceProcessorCreateProfilePhoto) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceCreateProfilePhotoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProfileServiceCreateProfilePhotoResult{}
	var retval *CreateProfilePhotoResponse
	if retval, err2 = p.handler.CreateProfilePhoto(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateProfilePhoto: "+err2.Error())
		oprot.WriteMessageBegin("CreateProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateProfilePhoto", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorCompleteProfilePhoto struct {
	handler ProfileService
}

func (p *profileServiceProcessorCompleteProfilePhoto) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceCompleteProfilePhotoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CompleteProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProfileServiceCompleteProfilePhotoResult{}
	var retval *Identity
	if retval, err2 = p.handler.CompleteProfilePhoto(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CompleteProfilePhoto: "+err2.Error())
		oprot.WriteMessageBegin("CompleteProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CompleteProfilePhoto", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorClearProfilePhoto struct {
	handler ProfileService
}

func (p *profileServiceProcessorClearProfilePhoto) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceClearProfilePhotoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClearProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProfileServiceClearProfilePhotoResult{}
	var retval *ClearProfilePhotoResponse
	if retval, err2 = p.handler.ClearProfilePhoto(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearProfilePhoto: "+err2.Error())
		oprot.WriteMessageBegin("ClearProfilePhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClearProfilePhoto", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ProfileServiceGetProfileArgs struct {
	Req *GetProfileRequest `thrift:"req,1" json:"req"`
}

func NewProfileServiceGetProfileArgs() *ProfileServiceGetProfileArgs {
	return &ProfileServiceGetProfileArgs{}
}

var ProfileServiceGetProfileArgs_Req_DEFAULT *GetProfileRequest

func (p *ProfileServiceGetProfileArgs) GetReq() (v *GetProfileRequest) {
	if !p.IsSetReq() {
		return ProfileServiceGetProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProfileServiceGetProfileArgs) SetReq(val *GetProfileRequest) {
	p.Req = val
}

var fieldIDToName_ProfileServiceGetProfileArgs = map[int16]string{
	1: "req",
}

func (p *ProfileServiceGetProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProfileServiceGetProfileArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceGetProfileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceGetProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetProfileRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceGetProfileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProfile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceGetProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProfileServiceGetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfileArgs(%+v)", *p)
}

func (p *ProfileServiceGetProfileArgs) DeepEqual(ano *ProfileServiceGetProfileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProfileServiceGetProfileArgs) Field1DeepEqual(src *GetProfileRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceGetProfileResult struct {
	Success *Profile `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewProfileServiceGetProfileResult() *ProfileServiceGetProfileResult {
	return &ProfileServiceGetProfileResult{}
}

var ProfileServiceGetProfileResult_Success_DEFAULT *Profile

func (p *ProfileServiceGetProfileResult) GetSuccess() (v *Profile) {
	if !p.IsSetSuccess() {
		return ProfileServiceGetProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProfileServiceGetProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*Profile)
}

var fieldIDToName_ProfileServiceGetProfileResult = map[int16]string{
	0: "success",
}

func (p *ProfileServiceGetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceGetProfileResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceGetProfileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceGetProfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProfile()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceGetProfileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProfile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProfileServiceGetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfileResult(%+v)", *p)
}

func (p *ProfileServiceGetProfileResult) DeepEqual(ano *ProfileServiceGetProfileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProfileServiceGetProfileResult) Field0DeepEqual(src *Profile) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceSubmitProfileArgs struct {
	Req *Identity `thrift:"req,1" json:"req"`
}

func NewProfileServiceSubmitProfileArgs() *ProfileServiceSubmitProfileArgs {
	return &ProfileServiceSubmitProfileArgs{}
}

var ProfileServiceSubmitProfileArgs_Req_DEFAULT *Identity

func (p *ProfileServiceSubmitProfileArgs) GetReq() (v *Identity) {
	if !p.IsSetReq() {
		return ProfileServiceSubmitProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProfileServiceSubmitProfileArgs) SetReq(val *Identity) {
	p.Req = val
}

var fieldIDToName_ProfileServiceSubmitProfileArgs = map[int16]string{
	1: "req",
}

func (p *ProfileServiceSubmitProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProfileServiceSubmitProfileArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceSubmitProfileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceSubmitProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewIdentity()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceSubmitProfileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitProfile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceSubmitProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProfileServiceSubmitProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceSubmitProfileArgs(%+v)", *p)
}

func (p *ProfileServiceSubmitProfileArgs) DeepEqual(ano *ProfileServiceSubmitProfileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProfileServiceSubmitProfileArgs) Field1DeepEqual(src *Identity) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceSubmitProfileResult struct {
	Success *Profile `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewProfileServiceSubmitProfileResult() *ProfileServiceSubmitProfileResult {
	return &ProfileServiceSubmitProfileResult{}
}

var ProfileServiceSubmitProfileResult_Success_DEFAULT *Profile

func (p *ProfileServiceSubmitProfileResult) GetSuccess() (v *Profile) {
	if !p.IsSetSuccess() {
		return ProfileServiceSubmitProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProfileServiceSubmitProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*Profile)
}

var fieldIDToName_ProfileServiceSubmitProfileResult = map[int16]string{
	0: "success",
}

func (p *ProfileServiceSubmitProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceSubmitProfileResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceSubmitProfileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceSubmitProfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProfile()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceSubmitProfileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitProfile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceSubmitProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProfileServiceSubmitProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceSubmitProfileResult(%+v)", *p)
}

func (p *ProfileServiceSubmitProfileResult) DeepEqual(ano *ProfileServiceSubmitProfileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProfileServiceSubmitProfileResult) Field0DeepEqual(src *Profile) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceClearProfileArgs struct {
	Req *ClearProfileRequest `thrift:"req,1" json:"req"`
}

func NewProfileServiceClearProfileArgs() *ProfileServiceClearProfileArgs {
	return &ProfileServiceClearProfileArgs{}
}

var ProfileServiceClearProfileArgs_Req_DEFAULT *ClearProfileRequest

func (p *ProfileServiceClearProfileArgs) GetReq() (v *ClearProfileRequest) {
	if !p.IsSetReq() {
		return ProfileServiceClearProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProfileServiceClearProfileArgs) SetReq(val *ClearProfileRequest) {
	p.Req = val
}

var fieldIDToName_ProfileServiceClearProfileArgs = map[int16]string{
	1: "req",
}

func (p *ProfileServiceClearProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProfileServiceClearProfileArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceClearProfileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceClearProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewClearProfileRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceClearProfileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearProfile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceClearProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProfileServiceClearProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceClearProfileArgs(%+v)", *p)
}

func (p *ProfileServiceClearProfileArgs) DeepEqual(ano *ProfileServiceClearProfileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProfileServiceClearProfileArgs) Field1DeepEqual(src *ClearProfileRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceClearProfileResult struct {
	Success *Profile `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewProfileServiceClearProfileResult() *ProfileServiceClearProfileResult {
	return &ProfileServiceClearProfileResult{}
}

var ProfileServiceClearProfileResult_Success_DEFAULT *Profile

func (p *ProfileServiceClearProfileResult) GetSuccess() (v *Profile) {
	if !p.IsSetSuccess() {
		return ProfileServiceClearProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProfileServiceClearProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*Profile)
}

var fieldIDToName_ProfileServiceClearProfileResult = map[int16]string{
	0: "success",
}

func (p *ProfileServiceClearProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceClearProfileResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceClearProfileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceClearProfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProfile()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceClearProfileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearProfile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceClearProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProfileServiceClearProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceClearProfileResult(%+v)", *p)
}

func (p *ProfileServiceClearProfileResult) DeepEqual(ano *ProfileServiceClearProfileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProfileServiceClearProfileResult) Field0DeepEqual(src *Profile) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceGetProfilePhotoArgs struct {
	Req *GetProfilePhotoRequest `thrift:"req,1" json:"req"`
}

func NewProfileServiceGetProfilePhotoArgs() *ProfileServiceGetProfilePhotoArgs {
	return &ProfileServiceGetProfilePhotoArgs{}
}

var ProfileServiceGetProfilePhotoArgs_Req_DEFAULT *GetProfilePhotoRequest

func (p *ProfileServiceGetProfilePhotoArgs) GetReq() (v *GetProfilePhotoRequest) {
	if !p.IsSetReq() {
		return ProfileServiceGetProfilePhotoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProfileServiceGetProfilePhotoArgs) SetReq(val *GetProfilePhotoRequest) {
	p.Req = val
}

var fieldIDToName_ProfileServiceGetProfilePhotoArgs = map[int16]string{
	1: "req",
}

func (p *ProfileServiceGetProfilePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProfileServiceGetProfilePhotoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceGetProfilePhotoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceGetProfilePhotoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetProfilePhotoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceGetProfilePhotoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProfilePhoto_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceGetProfilePhotoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProfileServiceGetProfilePhotoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilePhotoArgs(%+v)", *p)
}

func (p *ProfileServiceGetProfilePhotoArgs) DeepEqual(ano *ProfileServiceGetProfilePhotoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProfileServiceGetProfilePhotoArgs) Field1DeepEqual(src *GetProfilePhotoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceGetProfilePhotoResult struct {
	Success *GetProfilePhotoResponse `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewProfileServiceGetProfilePhotoResult() *ProfileServiceGetProfilePhotoResult {
	return &ProfileServiceGetProfilePhotoResult{}
}

var ProfileServiceGetProfilePhotoResult_Success_DEFAULT *GetProfilePhotoResponse

func (p *ProfileServiceGetProfilePhotoResult) GetSuccess() (v *GetProfilePhotoResponse) {
	if !p.IsSetSuccess() {
		return ProfileServiceGetProfilePhotoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProfileServiceGetProfilePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetProfilePhotoResponse)
}

var fieldIDToName_ProfileServiceGetProfilePhotoResult = map[int16]string{
	0: "success",
}

func (p *ProfileServiceGetProfilePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceGetProfilePhotoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceGetProfilePhotoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceGetProfilePhotoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetProfilePhotoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceGetProfilePhotoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProfilePhoto_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceGetProfilePhotoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProfileServiceGetProfilePhotoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilePhotoResult(%+v)", *p)
}

func (p *ProfileServiceGetProfilePhotoResult) DeepEqual(ano *ProfileServiceGetProfilePhotoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProfileServiceGetProfilePhotoResult) Field0DeepEqual(src *GetProfilePhotoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceCreateProfilePhotoArgs struct {
	Req *CreateProfilePhotoRequest `thrift:"req,1" json:"req"`
}

func NewProfileServiceCreateProfilePhotoArgs() *ProfileServiceCreateProfilePhotoArgs {
	return &ProfileServiceCreateProfilePhotoArgs{}
}

var ProfileServiceCreateProfilePhotoArgs_Req_DEFAULT *CreateProfilePhotoRequest

func (p *ProfileServiceCreateProfilePhotoArgs) GetReq() (v *CreateProfilePhotoRequest) {
	if !p.IsSetReq() {
		return ProfileServiceCreateProfilePhotoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProfileServiceCreateProfilePhotoArgs) SetReq(val *CreateProfilePhotoRequest) {
	p.Req = val
}

var fieldIDToName_ProfileServiceCreateProfilePhotoArgs = map[int16]string{
	1: "req",
}

func (p *ProfileServiceCreateProfilePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProfileServiceCreateProfilePhotoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceCreateProfilePhotoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceCreateProfilePhotoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateProfilePhotoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceCreateProfilePhotoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateProfilePhoto_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceCreateProfilePhotoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProfileServiceCreateProfilePhotoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceCreateProfilePhotoArgs(%+v)", *p)
}

func (p *ProfileServiceCreateProfilePhotoArgs) DeepEqual(ano *ProfileServiceCreateProfilePhotoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProfileServiceCreateProfilePhotoArgs) Field1DeepEqual(src *CreateProfilePhotoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceCreateProfilePhotoResult struct {
	Success *CreateProfilePhotoResponse `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewProfileServiceCreateProfilePhotoResult() *ProfileServiceCreateProfilePhotoResult {
	return &ProfileServiceCreateProfilePhotoResult{}
}

var ProfileServiceCreateProfilePhotoResult_Success_DEFAULT *CreateProfilePhotoResponse

func (p *ProfileServiceCreateProfilePhotoResult) GetSuccess() (v *CreateProfilePhotoResponse) {
	if !p.IsSetSuccess() {
		return ProfileServiceCreateProfilePhotoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProfileServiceCreateProfilePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateProfilePhotoResponse)
}

var fieldIDToName_ProfileServiceCreateProfilePhotoResult = map[int16]string{
	0: "success",
}

func (p *ProfileServiceCreateProfilePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceCreateProfilePhotoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceCreateProfilePhotoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceCreateProfilePhotoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateProfilePhotoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceCreateProfilePhotoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateProfilePhoto_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceCreateProfilePhotoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProfileServiceCreateProfilePhotoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceCreateProfilePhotoResult(%+v)", *p)
}

func (p *ProfileServiceCreateProfilePhotoResult) DeepEqual(ano *ProfileServiceCreateProfilePhotoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProfileServiceCreateProfilePhotoResult) Field0DeepEqual(src *CreateProfilePhotoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceCompleteProfilePhotoArgs struct {
	Req *CompleteProfilePhotoRequest `thrift:"req,1" json:"req"`
}

func NewProfileServiceCompleteProfilePhotoArgs() *ProfileServiceCompleteProfilePhotoArgs {
	return &ProfileServiceCompleteProfilePhotoArgs{}
}

var ProfileServiceCompleteProfilePhotoArgs_Req_DEFAULT *CompleteProfilePhotoRequest

func (p *ProfileServiceCompleteProfilePhotoArgs) GetReq() (v *CompleteProfilePhotoRequest) {
	if !p.IsSetReq() {
		return ProfileServiceCompleteProfilePhotoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProfileServiceCompleteProfilePhotoArgs) SetReq(val *CompleteProfilePhotoRequest) {
	p.Req = val
}

var fieldIDToName_ProfileServiceCompleteProfilePhotoArgs = map[int16]string{
	1: "req",
}

func (p *ProfileServiceCompleteProfilePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProfileServiceCompleteProfilePhotoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceCompleteProfilePhotoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceCompleteProfilePhotoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCompleteProfilePhotoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceCompleteProfilePhotoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CompleteProfilePhoto_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceCompleteProfilePhotoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProfileServiceCompleteProfilePhotoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceCompleteProfilePhotoArgs(%+v)", *p)
}

func (p *ProfileServiceCompleteProfilePhotoArgs) DeepEqual(ano *ProfileServiceCompleteProfilePhotoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProfileServiceCompleteProfilePhotoArgs) Field1DeepEqual(src *CompleteProfilePhotoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceCompleteProfilePhotoResult struct {
	Success *Identity `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewProfileServiceCompleteProfilePhotoResult() *ProfileServiceCompleteProfilePhotoResult {
	return &ProfileServiceCompleteProfilePhotoResult{}
}

var ProfileServiceCompleteProfilePhotoResult_Success_DEFAULT *Identity

func (p *ProfileServiceCompleteProfilePhotoResult) GetSuccess() (v *Identity) {
	if !p.IsSetSuccess() {
		return ProfileServiceCompleteProfilePhotoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProfileServiceCompleteProfilePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*Identity)
}

var fieldIDToName_ProfileServiceCompleteProfilePhotoResult = map[int16]string{
	0: "success",
}

func (p *ProfileServiceCompleteProfilePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceCompleteProfilePhotoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceCompleteProfilePhotoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceCompleteProfilePhotoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewIdentity()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceCompleteProfilePhotoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CompleteProfilePhoto_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceCompleteProfilePhotoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProfileServiceCompleteProfilePhotoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceCompleteProfilePhotoResult(%+v)", *p)
}

func (p *ProfileServiceCompleteProfilePhotoResult) DeepEqual(ano *ProfileServiceCompleteProfilePhotoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProfileServiceCompleteProfilePhotoResult) Field0DeepEqual(src *Identity) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceClearProfilePhotoArgs struct {
	Req *ClearProfilePhotoRequest `thrift:"req,1" json:"req"`
}

func NewProfileServiceClearProfilePhotoArgs() *ProfileServiceClearProfilePhotoArgs {
	return &ProfileServiceClearProfilePhotoArgs{}
}

var ProfileServiceClearProfilePhotoArgs_Req_DEFAULT *ClearProfilePhotoRequest

func (p *ProfileServiceClearProfilePhotoArgs) GetReq() (v *ClearProfilePhotoRequest) {
	if !p.IsSetReq() {
		return ProfileServiceClearProfilePhotoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProfileServiceClearProfilePhotoArgs) SetReq(val *ClearProfilePhotoRequest) {
	p.Req = val
}

var fieldIDToName_ProfileServiceClearProfilePhotoArgs = map[int16]string{
	1: "req",
}

func (p *ProfileServiceClearProfilePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProfileServiceClearProfilePhotoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceClearProfilePhotoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceClearProfilePhotoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewClearProfilePhotoRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceClearProfilePhotoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearProfilePhoto_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceClearProfilePhotoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProfileServiceClearProfilePhotoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceClearProfilePhotoArgs(%+v)", *p)
}

func (p *ProfileServiceClearProfilePhotoArgs) DeepEqual(ano *ProfileServiceClearProfilePhotoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProfileServiceClearProfilePhotoArgs) Field1DeepEqual(src *ClearProfilePhotoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProfileServiceClearProfilePhotoResult struct {
	Success *ClearProfilePhotoResponse `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewProfileServiceClearProfilePhotoResult() *ProfileServiceClearProfilePhotoResult {
	return &ProfileServiceClearProfilePhotoResult{}
}

var ProfileServiceClearProfilePhotoResult_Success_DEFAULT *ClearProfilePhotoResponse

func (p *ProfileServiceClearProfilePhotoResult) GetSuccess() (v *ClearProfilePhotoResponse) {
	if !p.IsSetSuccess() {
		return ProfileServiceClearProfilePhotoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProfileServiceClearProfilePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ClearProfilePhotoResponse)
}

var fieldIDToName_ProfileServiceClearProfilePhotoResult = map[int16]string{
	0: "success",
}

func (p *ProfileServiceClearProfilePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceClearProfilePhotoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProfileServiceClearProfilePhotoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProfileServiceClearProfilePhotoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewClearProfilePhotoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProfileServiceClearProfilePhotoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearProfilePhoto_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProfileServiceClearProfilePhotoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProfileServiceClearProfilePhotoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceClearProfilePhotoResult(%+v)", *p)
}

func (p *ProfileServiceClearProfilePhotoResult) DeepEqual(ano *ProfileServiceClearProfilePhotoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProfileServiceClearProfilePhotoResult) Field0DeepEqual(src *ClearProfilePhotoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
