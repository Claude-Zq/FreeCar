// Code generated by Kitex v0.4.3. DO NOT EDIT.

package tripservice

import (
	"context"
	rental "github.com/CyanAsterisk/FreeCar/server/cmd/rental/kitex_gen/rental"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return tripServiceServiceInfo
}

var tripServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TripService"
	handlerType := (*rental.TripService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateTrip": kitex.NewMethodInfo(createTripHandler, newTripServiceCreateTripArgs, newTripServiceCreateTripResult, false),
		"GetTrip":    kitex.NewMethodInfo(getTripHandler, newTripServiceGetTripArgs, newTripServiceGetTripResult, false),
		"GetTrips":   kitex.NewMethodInfo(getTripsHandler, newTripServiceGetTripsArgs, newTripServiceGetTripsResult, false),
		"UpdateTrip": kitex.NewMethodInfo(updateTripHandler, newTripServiceUpdateTripArgs, newTripServiceUpdateTripResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "rental",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.3",
		Extra:           extra,
	}
	return svcInfo
}

func createTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.TripServiceCreateTripArgs)
	realResult := result.(*rental.TripServiceCreateTripResult)
	success, err := handler.(rental.TripService).CreateTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceCreateTripArgs() interface{} {
	return rental.NewTripServiceCreateTripArgs()
}

func newTripServiceCreateTripResult() interface{} {
	return rental.NewTripServiceCreateTripResult()
}

func getTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.TripServiceGetTripArgs)
	realResult := result.(*rental.TripServiceGetTripResult)
	success, err := handler.(rental.TripService).GetTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceGetTripArgs() interface{} {
	return rental.NewTripServiceGetTripArgs()
}

func newTripServiceGetTripResult() interface{} {
	return rental.NewTripServiceGetTripResult()
}

func getTripsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.TripServiceGetTripsArgs)
	realResult := result.(*rental.TripServiceGetTripsResult)
	success, err := handler.(rental.TripService).GetTrips(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceGetTripsArgs() interface{} {
	return rental.NewTripServiceGetTripsArgs()
}

func newTripServiceGetTripsResult() interface{} {
	return rental.NewTripServiceGetTripsResult()
}

func updateTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.TripServiceUpdateTripArgs)
	realResult := result.(*rental.TripServiceUpdateTripResult)
	success, err := handler.(rental.TripService).UpdateTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceUpdateTripArgs() interface{} {
	return rental.NewTripServiceUpdateTripArgs()
}

func newTripServiceUpdateTripResult() interface{} {
	return rental.NewTripServiceUpdateTripResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateTrip(ctx context.Context, req *rental.CreateTripRequest) (r *rental.TripEntity, err error) {
	var _args rental.TripServiceCreateTripArgs
	_args.Req = req
	var _result rental.TripServiceCreateTripResult
	if err = p.c.Call(ctx, "CreateTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTrip(ctx context.Context, req *rental.GetTripRequest) (r *rental.Trip, err error) {
	var _args rental.TripServiceGetTripArgs
	_args.Req = req
	var _result rental.TripServiceGetTripResult
	if err = p.c.Call(ctx, "GetTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTrips(ctx context.Context, req *rental.GetTripsRequest) (r *rental.GetTripsResponse, err error) {
	var _args rental.TripServiceGetTripsArgs
	_args.Req = req
	var _result rental.TripServiceGetTripsResult
	if err = p.c.Call(ctx, "GetTrips", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTrip(ctx context.Context, req *rental.UpdateTripRequest) (r *rental.Trip, err error) {
	var _args rental.TripServiceUpdateTripArgs
	_args.Req = req
	var _result rental.TripServiceUpdateTripResult
	if err = p.c.Call(ctx, "UpdateTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
