// Code generated by Kitex v0.4.3. DO NOT EDIT.

package profileservice

import (
	"context"
	rental "github.com/CyanAsterisk/FreeCar/server/cmd/rental/kitex_gen/rental"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return profileServiceServiceInfo
}

var profileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProfileService"
	handlerType := (*rental.ProfileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetProfile":           kitex.NewMethodInfo(getProfileHandler, newProfileServiceGetProfileArgs, newProfileServiceGetProfileResult, false),
		"SubmitProfile":        kitex.NewMethodInfo(submitProfileHandler, newProfileServiceSubmitProfileArgs, newProfileServiceSubmitProfileResult, false),
		"ClearProfile":         kitex.NewMethodInfo(clearProfileHandler, newProfileServiceClearProfileArgs, newProfileServiceClearProfileResult, false),
		"GetProfilePhoto":      kitex.NewMethodInfo(getProfilePhotoHandler, newProfileServiceGetProfilePhotoArgs, newProfileServiceGetProfilePhotoResult, false),
		"CreateProfilePhoto":   kitex.NewMethodInfo(createProfilePhotoHandler, newProfileServiceCreateProfilePhotoArgs, newProfileServiceCreateProfilePhotoResult, false),
		"CompleteProfilePhoto": kitex.NewMethodInfo(completeProfilePhotoHandler, newProfileServiceCompleteProfilePhotoArgs, newProfileServiceCompleteProfilePhotoResult, false),
		"ClearProfilePhoto":    kitex.NewMethodInfo(clearProfilePhotoHandler, newProfileServiceClearProfilePhotoArgs, newProfileServiceClearProfilePhotoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "rental",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.3",
		Extra:           extra,
	}
	return svcInfo
}

func getProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.ProfileServiceGetProfileArgs)
	realResult := result.(*rental.ProfileServiceGetProfileResult)
	success, err := handler.(rental.ProfileService).GetProfile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProfileServiceGetProfileArgs() interface{} {
	return rental.NewProfileServiceGetProfileArgs()
}

func newProfileServiceGetProfileResult() interface{} {
	return rental.NewProfileServiceGetProfileResult()
}

func submitProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.ProfileServiceSubmitProfileArgs)
	realResult := result.(*rental.ProfileServiceSubmitProfileResult)
	success, err := handler.(rental.ProfileService).SubmitProfile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProfileServiceSubmitProfileArgs() interface{} {
	return rental.NewProfileServiceSubmitProfileArgs()
}

func newProfileServiceSubmitProfileResult() interface{} {
	return rental.NewProfileServiceSubmitProfileResult()
}

func clearProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.ProfileServiceClearProfileArgs)
	realResult := result.(*rental.ProfileServiceClearProfileResult)
	success, err := handler.(rental.ProfileService).ClearProfile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProfileServiceClearProfileArgs() interface{} {
	return rental.NewProfileServiceClearProfileArgs()
}

func newProfileServiceClearProfileResult() interface{} {
	return rental.NewProfileServiceClearProfileResult()
}

func getProfilePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.ProfileServiceGetProfilePhotoArgs)
	realResult := result.(*rental.ProfileServiceGetProfilePhotoResult)
	success, err := handler.(rental.ProfileService).GetProfilePhoto(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProfileServiceGetProfilePhotoArgs() interface{} {
	return rental.NewProfileServiceGetProfilePhotoArgs()
}

func newProfileServiceGetProfilePhotoResult() interface{} {
	return rental.NewProfileServiceGetProfilePhotoResult()
}

func createProfilePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.ProfileServiceCreateProfilePhotoArgs)
	realResult := result.(*rental.ProfileServiceCreateProfilePhotoResult)
	success, err := handler.(rental.ProfileService).CreateProfilePhoto(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProfileServiceCreateProfilePhotoArgs() interface{} {
	return rental.NewProfileServiceCreateProfilePhotoArgs()
}

func newProfileServiceCreateProfilePhotoResult() interface{} {
	return rental.NewProfileServiceCreateProfilePhotoResult()
}

func completeProfilePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.ProfileServiceCompleteProfilePhotoArgs)
	realResult := result.(*rental.ProfileServiceCompleteProfilePhotoResult)
	success, err := handler.(rental.ProfileService).CompleteProfilePhoto(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProfileServiceCompleteProfilePhotoArgs() interface{} {
	return rental.NewProfileServiceCompleteProfilePhotoArgs()
}

func newProfileServiceCompleteProfilePhotoResult() interface{} {
	return rental.NewProfileServiceCompleteProfilePhotoResult()
}

func clearProfilePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rental.ProfileServiceClearProfilePhotoArgs)
	realResult := result.(*rental.ProfileServiceClearProfilePhotoResult)
	success, err := handler.(rental.ProfileService).ClearProfilePhoto(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProfileServiceClearProfilePhotoArgs() interface{} {
	return rental.NewProfileServiceClearProfilePhotoArgs()
}

func newProfileServiceClearProfilePhotoResult() interface{} {
	return rental.NewProfileServiceClearProfilePhotoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetProfile(ctx context.Context, req *rental.GetProfileRequest) (r *rental.Profile, err error) {
	var _args rental.ProfileServiceGetProfileArgs
	_args.Req = req
	var _result rental.ProfileServiceGetProfileResult
	if err = p.c.Call(ctx, "GetProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubmitProfile(ctx context.Context, req *rental.Identity) (r *rental.Profile, err error) {
	var _args rental.ProfileServiceSubmitProfileArgs
	_args.Req = req
	var _result rental.ProfileServiceSubmitProfileResult
	if err = p.c.Call(ctx, "SubmitProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClearProfile(ctx context.Context, req *rental.ClearProfileRequest) (r *rental.Profile, err error) {
	var _args rental.ProfileServiceClearProfileArgs
	_args.Req = req
	var _result rental.ProfileServiceClearProfileResult
	if err = p.c.Call(ctx, "ClearProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProfilePhoto(ctx context.Context, req *rental.GetProfilePhotoRequest) (r *rental.GetProfilePhotoResponse, err error) {
	var _args rental.ProfileServiceGetProfilePhotoArgs
	_args.Req = req
	var _result rental.ProfileServiceGetProfilePhotoResult
	if err = p.c.Call(ctx, "GetProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateProfilePhoto(ctx context.Context, req *rental.CreateProfilePhotoRequest) (r *rental.CreateProfilePhotoResponse, err error) {
	var _args rental.ProfileServiceCreateProfilePhotoArgs
	_args.Req = req
	var _result rental.ProfileServiceCreateProfilePhotoResult
	if err = p.c.Call(ctx, "CreateProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CompleteProfilePhoto(ctx context.Context, req *rental.CompleteProfilePhotoRequest) (r *rental.Identity, err error) {
	var _args rental.ProfileServiceCompleteProfilePhotoArgs
	_args.Req = req
	var _result rental.ProfileServiceCompleteProfilePhotoResult
	if err = p.c.Call(ctx, "CompleteProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClearProfilePhoto(ctx context.Context, req *rental.ClearProfilePhotoRequest) (r *rental.ClearProfilePhotoResponse, err error) {
	var _args rental.ProfileServiceClearProfilePhotoArgs
	_args.Req = req
	var _result rental.ProfileServiceClearProfilePhotoResult
	if err = p.c.Call(ctx, "ClearProfilePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
