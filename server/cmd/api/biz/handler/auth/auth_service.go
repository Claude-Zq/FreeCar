// Code generated by hertz generator.

package auth

import (
	"context"
	"net/http"
	"time"

	models "github.com/CyanAsterisk/FreeCar/server/cmd/api/model"
	"github.com/CyanAsterisk/FreeCar/server/cmd/api/rpc"
	"github.com/CyanAsterisk/FreeCar/server/cmd/auth/kitex_gen/auth"
	"github.com/CyanAsterisk/FreeCar/shared/middleware"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/dgrijalva/jwt-go"
)

// Login .
// @router /v1/auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}
	// rpc to get accountID
	accountID, err := rpc.Login(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "rpc login error",
		})
		return
	}
	// create a JWT
	j := middleware.NewJWT()
	claims := models.CustomClaims{
		ID: accountID,
		StandardClaims: jwt.StandardClaims{
			NotBefore: time.Now().Unix(),
			ExpiresAt: time.Now().Unix() + 60*60*24*30,
			Issuer:    "FreeCar",
		},
	}
	token, err := j.CreateToken(claims)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "Generate token failed",
		})
		return
	}
	// return token
	c.JSON(200, utils.H{
		"token":      token,
		"expired_at": (time.Now().Unix() + 60*60*24*30) * 1000,
	})
}
