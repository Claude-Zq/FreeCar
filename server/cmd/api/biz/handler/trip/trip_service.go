// Code generated by hertz generator.

package trip

import (
	"context"
	"github.com/CyanAsterisk/FreeCar/server/cmd/trip/kitex_gen/trip"
	"net/http"

	"github.com/CyanAsterisk/FreeCar/server/cmd/api/global"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// CreateTrip .
// @router /v1/trip [POST]
func CreateTrip(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.CreateTripRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}
	aid, flag := c.Get("accountID")
	if !flag {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "jwt error",
		})
	}
	req.AccountId = aid.(int64)

	resp, err := global.TripClient.CreateTrip(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// GetTrip .
// @router /v1/trip/:id [GET]
func GetTrip(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.GetTripRequest
	aid, flag := c.Get("accountID")
	if !flag {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "jwt error",
		})
	}
	req.AccountId = aid.(int64)
	req.Id = c.Param("id")

	resp, err := global.TripClient.GetTrip(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// GetTrips .
// @router /v1/trips [GET]
func GetTrips(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.GetTripsRequest
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}
	aid, flag := c.Get("accountID")
	if !flag {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "jwt error",
		})
	}
	req.AccountId = aid.(int64)

	resp, err := global.TripClient.GetTrips(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// UpdateTrip .
// @router /v1/trip/:id [PUT]
func UpdateTrip(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.UpdateTripRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}
	aid, flag := c.Get("accountID")
	if !flag {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "jwt error",
		})
	}
	req.AccountId = aid.(int64)
	req.Id = c.Param("id")

	resp, err := global.TripClient.UpdateTrip(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}
