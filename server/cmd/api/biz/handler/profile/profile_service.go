// Code generated by hertz generator.

package profile

import (
	"context"
	"net/http"

	"github.com/CyanAsterisk/FreeCar/server/cmd/api/global"
	"github.com/CyanAsterisk/FreeCar/server/cmd/profile/kitex_gen/profile"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// GetProfile .
// @router /v1/profile [GET]
func GetProfile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req profile.GetProfileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}

	resp, err := global.ProfileClient.GetProfile(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// SubmitProfile .
// @router /v1/profile [POST]
func SubmitProfile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req profile.SubmitProfileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}

	resp, err := global.ProfileClient.SubmitProfile(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// ClearProfile .
// @router /v1/profile [DELETE]
func ClearProfile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req profile.ClearProfileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}

	resp, err := global.ProfileClient.ClearProfile(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// GetProfilePhoto .
// @router /v1/profile/photo [GET]
func GetProfilePhoto(ctx context.Context, c *app.RequestContext) {
	var err error
	var req profile.GetProfilePhotoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}

	resp, err := global.ProfileClient.GetProfilePhoto(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// CreateProfilePhoto .
// @router /v1/profile/photo [POST]
func CreateProfilePhoto(ctx context.Context, c *app.RequestContext) {
	var err error
	var req profile.CreateProfilePhotoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}

	resp, err := global.ProfileClient.CreateProfilePhoto(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// CompleteProfilePhoto .
// @router /v1/profile/photo/complete [POST]
func CompleteProfilePhoto(ctx context.Context, c *app.RequestContext) {
	var err error
	var req profile.CompleteProfilePhotoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}

	resp, err := global.ProfileClient.CompleteProfilePhoto(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}

// ClearProfilePhoto .
// @router /v1/profile/photo [DELETE]
func ClearProfilePhoto(ctx context.Context, c *app.RequestContext) {
	var err error
	var req profile.ClearProfilePhotoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}

	resp, err := global.ProfileClient.ClearProfilePhoto(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
		return
	}

	c.JSON(http.StatusOK, resp)
}
