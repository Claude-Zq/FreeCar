// Code generated by hertz generator.

package car

import (
	"context"
	"net/http"

	"github.com/CyanAsterisk/FreeCar/server/cmd/api/global"
	"github.com/CyanAsterisk/FreeCar/server/cmd/car/kitex_gen/car"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// CreateCar .
// @router /v1/car [POST]
func CreateCar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req car.CreateCarRequest
	aid, flag := c.Get("accountID")
	if !flag {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "jwt error",
		})
	}
	req.AccountId = aid.(int64)

	resp, err := global.CarClient.CreateCar(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
	}
	c.JSON(http.StatusOK, resp)
}

// GetCar .
// @router /v1/car [GET]
func GetCar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req car.GetCarRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "bind and validate error",
		})
		return
	}
	aid, flag := c.Get("accountID")
	if !flag {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "jwt error",
		})
	}
	req.AccountId = aid.(int64)

	resp, err := global.CarClient.GetCar(ctx, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": "client error",
		})
	}
	c.JSON(http.StatusOK, resp)
}
